#!/usr/bin/env python

from argparse import ArgumentParser, ArgumentTypeError

from eslib.esbackup import Backup
from eslib.cmd_args import t_int, t_ascii


def t_dataset(value):
    """Dataset validator"""
    ds = value.split('/')

    if len(ds) > 1:
        try:
            map(t_ascii, ds)
        except ArgumentTypeError:
            pass
        else:
            return value

    raise ArgumentTypeError('Invalid dataset: "%s"' % value)


def t_snapshot(value):
    """Snapshot validator"""
    dsnap = value.split('@')

    if len(dsnap) == 2:
        try:
            t_dataset(dsnap[0])
            t_ascii(dsnap[1])

            if not dsnap[1].startswith(Backup.SNAP_PREFIX[1:]):
                raise ArgumentTypeError
        except ArgumentTypeError:
            pass
        else:
            return value

    raise ArgumentTypeError('Invalid snapshot: "%s"' % value)


def t_file(value):
    fp = value.split('/')

    try:
        map(t_ascii, fp)
    except ArgumentTypeError:
        pass

    return value


def main():
    """Parse input and create Backup instance"""
    parser = ArgumentParser()
    subparsers = parser.add_subparsers(help='Actions', dest='action')

    verbose = ArgumentParser(add_help=False)
    verbose.add_argument('-v', '--verbose', help='Verbose output to stderr', action='store_true')

    ds_create = subparsers.add_parser('ds-create', help='Create dataset backup', parents=(verbose,))
    ds_create.add_argument('-d', '--destination', required=True, metavar='DATASET', type=t_dataset,
                           help='Destination dataset')
    ds_create.add_argument('-s', '--snapshot', required=True, metavar='DATASET@NAME', type=t_snapshot,
                           help='Source snapshot name, including dataset')
    ds_create.add_argument('-n', '--name', required=True, metavar='NAME', type=t_ascii, help='Backup name')
    ds_create.add_argument('-H', '--host', help='Source host', metavar='HOST', type=t_ascii)
    ds_create.add_argument('-l', '--limit', metavar='BW_LIMIT', type=t_int, help='Bandwidth limit')
    ds_create.add_argument('-F', '--fsfreeze', metavar='QA_SOCKET', type=t_file,
                           help='Send fsfreeze command to qemu agent socket')

    ds_delete = subparsers.add_parser('ds-delete', help='Delete dataset backup', parents=(verbose,))
    ds_delete.add_argument('-s', '--snapshot', nargs='+', required=True, metavar='DATASET@NAME', type=t_snapshot,
                           help='Backup snapshot name(s), including dataset')
    ds_delete.add_argument('-r', '--remote-snapshot', nargs='*', metavar='DATASET@NAME', type=t_snapshot,
                           help='Remote snapshot name(s) to destroy, including dataset')
    ds_delete.add_argument('-H', '--host', metavar='HOST', type=t_ascii, help='Destination host')

    ds_restore = subparsers.add_parser('ds-restore', help='Restore dataset backup', parents=(verbose,))
    ds_restore.add_argument('-d', '--destination', required=True, metavar='DATASET', type=t_dataset,
                            help='Destination dataset')
    ds_restore.add_argument('-s', '--snapshot', required=True, metavar='DATASET@NAME', type=t_snapshot,
                            help='Source snapshot name, including dataset')
    ds_restore.add_argument('-H', '--host', metavar='HOST', type=t_ascii, help='Destination host')

    file_create = subparsers.add_parser('file-create', help='Create file backup', parents=(verbose,))
    file_create.add_argument('-s', '--source', required=True, metavar='DATASET', type=t_dataset, help='Source dataset')
    file_create.add_argument('-f', '--file', required=True, metavar='FILE', type=t_file, help='Destination file')
    file_create.add_argument('-H', '--host', help='Source host', metavar='HOST', type=t_ascii)
    file_create.add_argument('-l', '--limit', metavar='BW_LIMIT', type=t_int, help='Bandwidth limit')
    file_create.add_argument('-c', '--compression', metavar='COMPRESSION', choices=('gzip', 'bzip2'),
                             help='Compression algorithm')
    file_create.add_argument('-F', '--fsfreeze', metavar='QA_SOCKET', type=t_file,
                             help='Send fsfreeze command to qemu agent socket')

    file_delete = subparsers.add_parser('file-delete', help='Delete file backup', parents=(verbose,))
    file_delete.add_argument('-f', '--file', nargs='+', required=True, metavar='FILE', type=t_file,
                             help='Backup file(s)')

    file_restore = subparsers.add_parser('file-restore', help='Restore file backup', parents=(verbose,))
    file_restore.add_argument('-f', '--file', required=True, metavar='FILE', type=t_file, help='Source file')
    file_restore.add_argument('-d', '--destination', required=True, metavar='DATASET', type=t_dataset,
                              help='Destination dataset')
    file_restore.add_argument('-c', '--checksum', required=True, metavar='SHA1', type=t_ascii, help='File checksum')
    file_restore.add_argument('-H', '--host', metavar='HOST', type=t_ascii, help='Destination host')

    args = parser.parse_args()
    # Create backup instance
    bkp = Backup(**args.__dict__)
    cmd = args.action

    if cmd == 'ds-create':
        res = bkp.ds_create(args.snapshot, args.destination, args.name, fsfreeze=args.fsfreeze)
    elif cmd == 'ds-delete':
        res = bkp.ds_delete(args.snapshot, last_snapshots=args.remote_snapshot)
    elif cmd == 'ds-restore':
        res = bkp.ds_restore(args.snapshot, args.destination)
    elif cmd == 'file-create':
        res = bkp.file_create(args.source, args.file, fsfreeze=args.fsfreeze)
    elif cmd == 'file-delete':
        res = bkp.file_delete(args.file)
    elif cmd == 'file-restore':
        res = bkp.file_restore(args.destination, args.file, args.checksum)
    else:
        raise SystemExit(-1)

    bkp.output_and_exit(res)


if __name__ == '__main__':
    main()
