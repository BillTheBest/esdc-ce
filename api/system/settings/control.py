import inspect
from logging import getLogger

from django.conf import settings, empty
from django.utils.six import iteritems
# noinspection PyUnresolvedReferences
from django.utils.six.moves import reload_module

from vms.models import Dc

try:
    from core import local_settings
except ImportError:
    local_settings = None

logger = getLogger(__name__)


class SettingsControl(object):
    """
    Danube Cloud settings control panel.
    """
    @staticmethod
    def _show_changes(changes):
        return ', '.join(['%s=%s' % i for i in changes])

    @staticmethod
    def _save_file(filename, data):
        with open(filename, 'w') as f:
            f.write(data)

    @classmethod
    def check_modules(cls, enabled_modules):
        """Check current status of modules according to enabled_modules parameter.
        Return list of modules that need to be changed."""
        changes = []

        for opt in settings.MODULES:
            wannabe_status = opt in enabled_modules

            try:
                current_status = getattr(settings, opt)
            except AttributeError:
                changes.append((opt, wannabe_status))
            else:
                if current_status != wannabe_status:
                    changes.append((opt, wannabe_status))

        return tuple(changes)

    # noinspection PyMethodMayBeStatic
    def _local_settings_new(self, changes):
        """Generate new local_settings.py as string.
        The changes parameter should be a list generated by check_modules()"""
        changes = dict(changes)
        res = []

        # Update or copy existing settings
        for opt in dir(local_settings):
            if not opt[0].isupper():
                continue

            if opt in changes:
                opt_value = changes.pop(opt)
            else:
                opt_value = getattr(local_settings, opt)

            res.append('%s = %s' % (opt, repr(opt_value)))

        # Add new settings
        for opt, opt_value in iteritems(changes):
            res.append('%s = %s' % (opt, repr(opt_value)))

        return '\n'.join(res)

    def local_settings_update(self, changes):
        """Update local_settings.py with new content created according to the changes parameter.
         The changes parameter should be a list generated by check_modules()"""
        if not local_settings:
            raise SystemError('Missing local_settings.py!')

        logger.info('Creating new local_settings.py with following changes: %s', self._show_changes(changes))
        target = inspect.getsourcefile(local_settings)
        data = self._local_settings_new(changes)
        backup = inspect.getsource(local_settings)

        logger.warn('Updating %s', target)
        self._save_file(target, data)

        try:
            reload_module(local_settings)
        except ImportError as e:
            logger.exception(e)
            logger.warn('Restoring %s from backup', target)
            self._save_file(target, backup)
        else:
            # Force reloading of django settings
            settings._wrapped = empty

    def dc_settings_update(self, changes):
        """Update custom DB settings in all Datacenters
        The changes parameter should be a list generated by check_modules()"""
        logger.info('Updating datacenter settings with following changes: %s', self._show_changes(changes))

        for dc in Dc.objects.all():
            dcs = dc.custom_settings
            dcs_changed = False

            for opt, opt_value in changes:
                if opt in dcs and dcs[opt] != opt_value:
                    del dcs[opt]
                    dcs_changed = True

            if dcs_changed:
                dc.custom_settings = dcs
                dc.save()
